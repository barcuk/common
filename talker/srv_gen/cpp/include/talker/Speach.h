/* Auto-generated by genmsg_cpp for file /home/peter/fuerte_workspace/common/talker/srv/Speach.srv */
#ifndef TALKER_SERVICE_SPEACH_H
#define TALKER_SERVICE_SPEACH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "std_msgs/String.h"



namespace talker
{
template <class ContainerAllocator>
struct SpeachRequest_ {
  typedef SpeachRequest_<ContainerAllocator> Type;

  SpeachRequest_()
  : text()
  {
  }

  SpeachRequest_(const ContainerAllocator& _alloc)
  : text(_alloc)
  {
  }

  typedef  ::std_msgs::String_<ContainerAllocator>  _text_type;
   ::std_msgs::String_<ContainerAllocator>  text;


  typedef boost::shared_ptr< ::talker::SpeachRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::talker::SpeachRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SpeachRequest
typedef  ::talker::SpeachRequest_<std::allocator<void> > SpeachRequest;

typedef boost::shared_ptr< ::talker::SpeachRequest> SpeachRequestPtr;
typedef boost::shared_ptr< ::talker::SpeachRequest const> SpeachRequestConstPtr;


template <class ContainerAllocator>
struct SpeachResponse_ {
  typedef SpeachResponse_<ContainerAllocator> Type;

  SpeachResponse_()
  {
  }

  SpeachResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::talker::SpeachResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::talker::SpeachResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SpeachResponse
typedef  ::talker::SpeachResponse_<std::allocator<void> > SpeachResponse;

typedef boost::shared_ptr< ::talker::SpeachResponse> SpeachResponsePtr;
typedef boost::shared_ptr< ::talker::SpeachResponse const> SpeachResponseConstPtr;

struct Speach
{

typedef SpeachRequest Request;
typedef SpeachResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Speach
} // namespace talker

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::talker::SpeachRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::talker::SpeachRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::talker::SpeachRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7fb91077b93c329c9eeaea1c488c03e0";
  }

  static const char* value(const  ::talker::SpeachRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7fb91077b93c329cULL;
  static const uint64_t static_value2 = 0x9eeaea1c488c03e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::talker::SpeachRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "talker/SpeachRequest";
  }

  static const char* value(const  ::talker::SpeachRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::talker::SpeachRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "std_msgs/String text\n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
";
  }

  static const char* value(const  ::talker::SpeachRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::talker::SpeachResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::talker::SpeachResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::talker::SpeachResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::talker::SpeachResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::talker::SpeachResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "talker/SpeachResponse";
  }

  static const char* value(const  ::talker::SpeachResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::talker::SpeachResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::talker::SpeachResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::talker::SpeachResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::talker::SpeachRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.text);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SpeachRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::talker::SpeachResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SpeachResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<talker::Speach> {
  static const char* value() 
  {
    return "7fb91077b93c329c9eeaea1c488c03e0";
  }

  static const char* value(const talker::Speach&) { return value(); } 
};

template<>
struct DataType<talker::Speach> {
  static const char* value() 
  {
    return "talker/Speach";
  }

  static const char* value(const talker::Speach&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<talker::SpeachRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7fb91077b93c329c9eeaea1c488c03e0";
  }

  static const char* value(const talker::SpeachRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<talker::SpeachRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "talker/Speach";
  }

  static const char* value(const talker::SpeachRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<talker::SpeachResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7fb91077b93c329c9eeaea1c488c03e0";
  }

  static const char* value(const talker::SpeachResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<talker::SpeachResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "talker/Speach";
  }

  static const char* value(const talker::SpeachResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // TALKER_SERVICE_SPEACH_H

